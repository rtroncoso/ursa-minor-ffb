name: release-windows

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    env:
      # Human-readable app name you show in the UI
      BIN_NAME: Ursa Minor FFB

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build (release)
        run: cargo build --release --locked

      - name: Prepare bundle (zip + checksums)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $tag = "${{ github.ref_name }}"
          $repo = "${{ github.event.repository.name }}"
          $dist = "dist"
          New-Item -ItemType Directory -Force -Path $dist | Out-Null

          # Try to locate the exe produced by cargo:
          #   - dashed (cargo default from package name) e.g. "ursa-minor-ffb.exe"
          #   - exact BIN_NAME (if you defined [[bin]] name with spaces)
          $binDashed = ($env:BIN_NAME -replace '[^\w\-]', '-').ToLower()
          $candidates = @(
            "target\release\$binDashed.exe",
            "target\release\$($env:BIN_NAME).exe"
          )

          $exePath = $null
          foreach ($c in $candidates) {
            if (Test-Path $c) { $exePath = (Resolve-Path $c).Path; break }
          }
          if (-not $exePath) {
            $exe = Get-ChildItem "target\release\*.exe" | Select-Object -First 1
            if ($exe) { $exePath = $exe.FullName }
          }
          if (-not $exePath) {
            Write-Error "Could not find built .exe in target\release"
          }

          Write-Host "Found EXE: $exePath"

          # Zip name: <repo>-<tag>-windows-x64.zip (e.g. ursa-minor-ffb-v1.2.3-windows-x64.zip)
          $zipName = "$repo-$tag-windows-x64.zip"
          $zipPath = Join-Path $dist $zipName

          # Create a minimal bundle: just the EXE (rename inside zip to the nice BIN_NAME)
          $tmpDir = New-Item -ItemType Directory -Force -Path (Join-Path $env:RUNNER_TEMP "bundle") | Select-Object -ExpandProperty FullName
          Copy-Item $exePath (Join-Path $tmpDir "$($env:BIN_NAME).exe")

          Compress-Archive -Path (Join-Path $tmpDir "*") -DestinationPath $zipPath -Force

          # Generate SHA256SUMS.txt for the zip
          $hash = (Get-FileHash -Path $zipPath -Algorithm SHA256).Hash.ToLower()
          $sumLine = "$hash  $zipName"
          $sumFile = Join-Path $dist "SHA256SUMS.txt"
          Set-Content -Path $sumFile -Value $sumLine -NoNewline

          Write-Host "Created: $zipPath"
          Write-Host "Checksums: $sumFile"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: |
            dist/*.zip
            dist/SHA256SUMS.txt
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-x64
          path: dist

      # 1) Create or update a DRAFT release and upload assets
      - name: Create Draft Release & Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: "Automated release for ${{ github.ref_name }}"
          draft: true                 # <-- important: draft first
          prerelease: false
          generate_release_notes: false
          fail_on_unmatched_files: true
          files: |
            dist/*.zip
            dist/SHA256SUMS.txt

      # 2) Publish the draft so it becomes visible/latest
      - name: Publish Draft Release
        env:
          GH_TOKEN: ${{ github.token }}
          TAG: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          # Ensure the draft exists, then publish it
          gh release view "$TAG" --repo "$REPO" >/dev/null
          gh release edit "$TAG" --repo "$REPO" --draft=false --latest
